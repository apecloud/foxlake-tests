# This test will insert multiple rows that will produce multiple sketch tree nodes.
# It aims at testing the sketch tree transformation, i.e. binary tree to quad tree,
# or quad tree to 16-ary tree, etc. And it will verify the correctness of sketch tree nodes.

statement ok
DROP DATABASE IF EXISTS test_sketch_k_tree;

statement ok
CREATE DATABASE test_sketch_k_tree;

statement ok
USE test_sketch_k_tree;

statement ok
CREATE TABLE IF NOT EXISTS `test` (
  `id` bigint(5) NOT NULL,
  `name` varchar(25) NOT NULL,
  PRIMARY KEY (`id`)
);

# Set ORC_MAX_ROWS_PER_FILE and CHUNK_SIZE to 1 to make sure every value in the insertion
# creates a new data file and sketch leaf node.
statement ok
SET ORC_MAX_ROWS_PER_FILE=1, CHUNK_SIZE=1;

# insert 16 rows to create 16 leaf nodes that will form a sketch binary tree.
statement ok
insert into test values (1, "a"), (2, "a"), (3, "a"), (4, "a"), (5, "a"), (6, "a"), (7, "a"), (8, "a"),
(9, "a"), (10, "a"), (11, "a"), (12, "a"), (13, "a"), (14, "a"), (15, "a"), (16, "a");

query II nosort
select node_level, sketch_idx from information_schema.sketch_tree_structures
where schema_name = "test_sketch_k_tree" and table_name = "test";
----
4	0
3	8
3	0
2	12
2	8
2	4
2	0
1	14
1	12
1	10
1	8
1	6
1	4
1	2
1	0
0	15
0	14
0	13
0	12
0	11
0	10
0	9
0	8
0	7
0	6
0	5
0	4
0	3
0	2
0	1
0	0

query IIT nosort
verify sketch_tree of test_sketch_k_tree.test;
----
1	0	OK
1	2	OK
1	4	OK
1	6	OK
1	8	OK
1	10	OK
1	12	OK
1	14	OK
2	0	OK
2	4	OK
2	8	OK
2	12	OK
3	0	OK
3	8	OK
4	0	OK

# insert 16 more rows to create another 16 leaf nodes that will transform
# the sketch binary tree to a sketch quad tree.
statement ok
insert into test values (17, "a"), (18, "a"), (19, "a"), (20, "a"), (21, "a"), (22, "a"), (23, "a"), (24, "a"),
(25, "a"), (26, "a"), (27, "a"), (28, "a"), (29, "a"), (30, "a"), (31, "a"), (32, "a");

query II nosort
select node_level, sketch_idx from information_schema.sketch_tree_structures
where schema_name = "test_sketch_k_tree" and table_name = "test";
----
6	0
4	16
4	0
2	28
2	24
2	20
2	16
2	12
2	8
2	4
2	0
0	31
0	30
0	29
0	28
0	27
0	26
0	25
0	24
0	23
0	22
0	21
0	20
0	19
0	18
0	17
0	16
0	15
0	14
0	13
0	12
0	11
0	10
0	9
0	8
0	7
0	6
0	5
0	4
0	3
0	2
0	1
0	0

query IIT nosort
verify sketch_tree of test_sketch_k_tree.test;
----
2	0	OK
2	4	OK
2	8	OK
2	12	OK
2	16	OK
2	20	OK
2	24	OK
2	28	OK
4	0	OK
4	16	OK
6	0	OK

# The sketch quad tree will not be transformed to a sketch 16-ary tree
# before the number of leaf nodes is greater than 256. So insert 224 more rows
# to the table, and the sketch tree will still be a sketch quad tree.
statement ok
insert into test values (33, "a"), (34, "a"), (35, "a"), (36, "a"), (37, "a"), (38, "a"), (39, "a"), (40, "a"),
(41, "a"), (42, "a"), (43, "a"), (44, "a"), (45, "a"), (46, "a"), (47, "a"), (48, "a"), (49, "a"), (50, "a"),
(51, "a"), (52, "a"), (53, "a"), (54, "a"), (55, "a"), (56, "a"), (57, "a"), (58, "a"), (59, "a"), (60, "a"),
(61, "a"), (62, "a"), (63, "a"), (64, "a"), (65, "a"), (66, "a"), (67, "a"), (68, "a"), (69, "a"), (70, "a"),
(71, "a"), (72, "a"), (73, "a"), (74, "a"), (75, "a"), (76, "a"), (77, "a"), (78, "a"), (79, "a"), (80, "a"),
(81, "a"), (82, "a"), (83, "a"), (84, "a"), (85, "a"), (86, "a"), (87, "a"), (88, "a"), (89, "a"), (90, "a"),
(91, "a"), (92, "a"), (93, "a"), (94, "a"), (95, "a"), (96, "a"), (97, "a"), (98, "a"), (99, "a"), (100, "a"),
(101, "a"), (102, "a"), (103, "a"), (104, "a"), (105, "a"), (106, "a"), (107, "a"), (108, "a"), (109, "a"), (110, "a"),
(111, "a"), (112, "a"), (113, "a"), (114, "a"), (115, "a"), (116, "a"), (117, "a"), (118, "a"), (119, "a"), (120, "a"),
(121, "a"), (122, "a"), (123, "a"), (124, "a"), (125, "a"), (126, "a"), (127, "a"), (128, "a"), (129, "a"), (130, "a"),
(131, "a"), (132, "a"), (133, "a"), (134, "a"), (135, "a"), (136, "a"), (137, "a"), (138, "a"), (139, "a"), (140, "a"),
(141, "a"), (142, "a"), (143, "a"), (144, "a"), (145, "a"), (146, "a"), (147, "a"), (148, "a"), (149, "a"), (150, "a"),
(151, "a"), (152, "a"), (153, "a"), (154, "a"), (155, "a"), (156, "a"), (157, "a"), (158, "a"), (159, "a"), (160, "a"),
(161, "a"), (162, "a"), (163, "a"), (164, "a"), (165, "a"), (166, "a"), (167, "a"), (168, "a"), (169, "a"), (170, "a"),
(171, "a"), (172, "a"), (173, "a"), (174, "a"), (175, "a"), (176, "a"), (177, "a"), (178, "a"), (179, "a"), (180, "a"),
(181, "a"), (182, "a"), (183, "a"), (184, "a"), (185, "a"), (186, "a"), (187, "a"), (188, "a"), (189, "a"), (190, "a"),
(191, "a"), (192, "a"), (193, "a"), (194, "a"), (195, "a"), (196, "a"), (197, "a"), (198, "a"), (199, "a"), (200, "a"),
(201, "a"), (202, "a"), (203, "a"), (204, "a"), (205, "a"), (206, "a"), (207, "a"), (208, "a"), (209, "a"), (210, "a"),
(211, "a"), (212, "a"), (213, "a"), (214, "a"), (215, "a"), (216, "a"), (217, "a"), (218, "a"), (219, "a"), (220, "a"),
(221, "a"), (222, "a"), (223, "a"), (224, "a"), (225, "a"), (226, "a"), (227, "a"), (228, "a"), (229, "a"), (230, "a"),
(231, "a"), (232, "a"), (233, "a"), (234, "a"), (235, "a"), (236, "a"), (237, "a"), (238, "a"), (239, "a"), (240, "a"),
(241, "a"), (242, "a"), (243, "a"), (244, "a"), (245, "a"), (246, "a"), (247, "a"), (248, "a"), (249, "a"), (250, "a"),
(251, "a"), (252, "a"), (253, "a"), (254, "a"), (255, "a"), (256, "a");

query II nosort
select node_level, sketch_idx from information_schema.sketch_tree_structures
where schema_name = "test_sketch_k_tree" and table_name = "test";
----
8	0
6	192
6	128
6	64
6	0
4	240
4	224
4	208
4	192
4	176
4	160
4	144
4	128
4	112
4	96
4	80
4	64
4	48
4	32
4	16
4	0
2	252
2	248
2	244
2	240
2	236
2	232
2	228
2	224
2	220
2	216
2	212
2	208
2	204
2	200
2	196
2	192
2	188
2	184
2	180
2	176
2	172
2	168
2	164
2	160
2	156
2	152
2	148
2	144
2	140
2	136
2	132
2	128
2	124
2	120
2	116
2	112
2	108
2	104
2	100
2	96
2	92
2	88
2	84
2	80
2	76
2	72
2	68
2	64
2	60
2	56
2	52
2	48
2	44
2	40
2	36
2	32
2	28
2	24
2	20
2	16
2	12
2	8
2	4
2	0
0	255
0	254
0	253
0	252
0	251
0	250
0	249
0	248
0	247
0	246
0	245
0	244
0	243
0	242
0	241
0	240
0	239
0	238
0	237
0	236
0	235
0	234
0	233
0	232
0	231
0	230
0	229
0	228
0	227
0	226
0	225
0	224
0	223
0	222
0	221
0	220
0	219
0	218
0	217
0	216
0	215
0	214
0	213
0	212
0	211
0	210
0	209
0	208
0	207
0	206
0	205
0	204
0	203
0	202
0	201
0	200
0	199
0	198
0	197
0	196
0	195
0	194
0	193
0	192
0	191
0	190
0	189
0	188
0	187
0	186
0	185
0	184
0	183
0	182
0	181
0	180
0	179
0	178
0	177
0	176
0	175
0	174
0	173
0	172
0	171
0	170
0	169
0	168
0	167
0	166
0	165
0	164
0	163
0	162
0	161
0	160
0	159
0	158
0	157
0	156
0	155
0	154
0	153
0	152
0	151
0	150
0	149
0	148
0	147
0	146
0	145
0	144
0	143
0	142
0	141
0	140
0	139
0	138
0	137
0	136
0	135
0	134
0	133
0	132
0	131
0	130
0	129
0	128
0	127
0	126
0	125
0	124
0	123
0	122
0	121
0	120
0	119
0	118
0	117
0	116
0	115
0	114
0	113
0	112
0	111
0	110
0	109
0	108
0	107
0	106
0	105
0	104
0	103
0	102
0	101
0	100
0	99
0	98
0	97
0	96
0	95
0	94
0	93
0	92
0	91
0	90
0	89
0	88
0	87
0	86
0	85
0	84
0	83
0	82
0	81
0	80
0	79
0	78
0	77
0	76
0	75
0	74
0	73
0	72
0	71
0	70
0	69
0	68
0	67
0	66
0	65
0	64
0	63
0	62
0	61
0	60
0	59
0	58
0	57
0	56
0	55
0	54
0	53
0	52
0	51
0	50
0	49
0	48
0	47
0	46
0	45
0	44
0	43
0	42
0	41
0	40
0	39
0	38
0	37
0	36
0	35
0	34
0	33
0	32
0	31
0	30
0	29
0	28
0	27
0	26
0	25
0	24
0	23
0	22
0	21
0	20
0	19
0	18
0	17
0	16
0	15
0	14
0	13
0	12
0	11
0	10
0	9
0	8
0	7
0	6
0	5
0	4
0	3
0	2
0	1
0	0

query IIT nosort
verify sketch_tree of test_sketch_k_tree.test;
----
2	0	OK
2	4	OK
2	8	OK
2	12	OK
2	16	OK
2	20	OK
2	24	OK
2	28	OK
2	32	OK
2	36	OK
2	40	OK
2	44	OK
2	48	OK
2	52	OK
2	56	OK
2	60	OK
2	64	OK
2	68	OK
2	72	OK
2	76	OK
2	80	OK
2	84	OK
2	88	OK
2	92	OK
2	96	OK
2	100	OK
2	104	OK
2	108	OK
2	112	OK
2	116	OK
2	120	OK
2	124	OK
2	128	OK
2	132	OK
2	136	OK
2	140	OK
2	144	OK
2	148	OK
2	152	OK
2	156	OK
2	160	OK
2	164	OK
2	168	OK
2	172	OK
2	176	OK
2	180	OK
2	184	OK
2	188	OK
2	192	OK
2	196	OK
2	200	OK
2	204	OK
2	208	OK
2	212	OK
2	216	OK
2	220	OK
2	224	OK
2	228	OK
2	232	OK
2	236	OK
2	240	OK
2	244	OK
2	248	OK
2	252	OK
4	0	OK
4	16	OK
4	32	OK
4	48	OK
4	64	OK
4	80	OK
4	96	OK
4	112	OK
4	128	OK
4	144	OK
4	160	OK
4	176	OK
4	192	OK
4	208	OK
4	224	OK
4	240	OK
6	0	OK
6	64	OK
6	128	OK
6	192	OK
8	0	OK

# Insert one more row, there will be 257 leaf nodes in the sketch tree.
# And the sketch tree will be transformed to a sketch 16-ary tree.
statement ok
insert into test values (257, "a");

query II nosort
select node_level, sketch_idx from information_schema.sketch_tree_structures
where schema_name = "test_sketch_k_tree" and table_name = "test";
----
12	0
8	256
8	0
4	256
4	240
4	224
4	208
4	192
4	176
4	160
4	144
4	128
4	112
4	96
4	80
4	64
4	48
4	32
4	16
4	0
0	256
0	255
0	254
0	253
0	252
0	251
0	250
0	249
0	248
0	247
0	246
0	245
0	244
0	243
0	242
0	241
0	240
0	239
0	238
0	237
0	236
0	235
0	234
0	233
0	232
0	231
0	230
0	229
0	228
0	227
0	226
0	225
0	224
0	223
0	222
0	221
0	220
0	219
0	218
0	217
0	216
0	215
0	214
0	213
0	212
0	211
0	210
0	209
0	208
0	207
0	206
0	205
0	204
0	203
0	202
0	201
0	200
0	199
0	198
0	197
0	196
0	195
0	194
0	193
0	192
0	191
0	190
0	189
0	188
0	187
0	186
0	185
0	184
0	183
0	182
0	181
0	180
0	179
0	178
0	177
0	176
0	175
0	174
0	173
0	172
0	171
0	170
0	169
0	168
0	167
0	166
0	165
0	164
0	163
0	162
0	161
0	160
0	159
0	158
0	157
0	156
0	155
0	154
0	153
0	152
0	151
0	150
0	149
0	148
0	147
0	146
0	145
0	144
0	143
0	142
0	141
0	140
0	139
0	138
0	137
0	136
0	135
0	134
0	133
0	132
0	131
0	130
0	129
0	128
0	127
0	126
0	125
0	124
0	123
0	122
0	121
0	120
0	119
0	118
0	117
0	116
0	115
0	114
0	113
0	112
0	111
0	110
0	109
0	108
0	107
0	106
0	105
0	104
0	103
0	102
0	101
0	100
0	99
0	98
0	97
0	96
0	95
0	94
0	93
0	92
0	91
0	90
0	89
0	88
0	87
0	86
0	85
0	84
0	83
0	82
0	81
0	80
0	79
0	78
0	77
0	76
0	75
0	74
0	73
0	72
0	71
0	70
0	69
0	68
0	67
0	66
0	65
0	64
0	63
0	62
0	61
0	60
0	59
0	58
0	57
0	56
0	55
0	54
0	53
0	52
0	51
0	50
0	49
0	48
0	47
0	46
0	45
0	44
0	43
0	42
0	41
0	40
0	39
0	38
0	37
0	36
0	35
0	34
0	33
0	32
0	31
0	30
0	29
0	28
0	27
0	26
0	25
0	24
0	23
0	22
0	21
0	20
0	19
0	18
0	17
0	16
0	15
0	14
0	13
0	12
0	11
0	10
0	9
0	8
0	7
0	6
0	5
0	4
0	3
0	2
0	1
0	0

query IIT nosort
verify sketch_tree of test_sketch_k_tree.test;
----
4	0	OK
4	16	OK
4	32	OK
4	48	OK
4	64	OK
4	80	OK
4	96	OK
4	112	OK
4	128	OK
4	144	OK
4	160	OK
4	176	OK
4	192	OK
4	208	OK
4	224	OK
4	240	OK
4	256	OK
8	0	OK
8	256	OK
12	0	OK

# truncate the table, all the sketches should be re-written as empty, and the sketch tree
# will fallback to a sketch binary tree.
statement ok
truncate table test;

query IIT nosort
select node_level, sketch_idx, stat_blob_key from information_schema.sketch_tree_structures
where schema_name = "test_sketch_k_tree" and table_name = "test";
----

query IIT nosort
verify sketch_tree of test_sketch_k_tree.test;
----

# insert 16 rows to create 16 leaf nodes that will form a sketch binary tree.
statement ok
insert into test values (1, "a"), (2, "a"), (3, "a"), (4, "a"), (5, "a"), (6, "a"), (7, "a"), (8, "a"),
(9, "a"), (10, "a"), (11, "a"), (12, "a"), (13, "a"), (14, "a"), (15, "a"), (16, "a");

query II nosort
select node_level, sketch_idx from information_schema.sketch_tree_structures
where schema_name = "test_sketch_k_tree" and table_name = "test";
----
4	0
3	8
3	0
2	12
2	8
2	4
2	0
1	14
1	12
1	10
1	8
1	6
1	4
1	2
1	0
0	15
0	14
0	13
0	12
0	11
0	10
0	9
0	8
0	7
0	6
0	5
0	4
0	3
0	2
0	1
0	0

query IIT nosort
verify sketch_tree of test_sketch_k_tree.test;
----
1	0	OK
1	2	OK
1	4	OK
1	6	OK
1	8	OK
1	10	OK
1	12	OK
1	14	OK
2	0	OK
2	4	OK
2	8	OK
2	12	OK
3	0	OK
3	8	OK
4	0	OK

statement ok
truncate table test;

query IIT nosort
select node_level, sketch_idx, stat_blob_key from information_schema.sketch_tree_structures
where schema_name = "test_sketch_k_tree" and table_name = "test";
----

query IIT nosort
verify sketch_tree of test_sketch_k_tree.test;
----

statement ok
insert into test values (1, "a");

statement ok
insert into test values (2, "a");

statement ok
insert into test values (3, "a");

statement ok
insert into test values (4, "a");

statement ok
delete from test where id in (1, 2, 3);

# Although FoxLake can decrease the sketch tree level when the number of children
# of the root node is less than 2, it will not decrease the level when the only
# child of the root is not the leftmost child. This is because if removing
# the such root will leave a standalone subtree in the sketch tree. When
# FoxLake append a new leaf node to this sketch tree, the new subtree created
# based on the new leaf node will be another standalone subtree. This will
# lead to an unexpected sketch tree structure.
query II nosort
select node_level, sketch_idx from information_schema.sketch_tree_structures
where schema_name = "test_sketch_k_tree" and table_name = "test";
----
2	0
1	2
0	3

query IIT nosort
verify sketch_tree of test_sketch_k_tree.test;
----
1	2	OK
2	0	OK

statement ok
insert into test values (5, "a");

# Reuse deleted leaf node on (0, 0).
query II nosort
select node_level, sketch_idx from information_schema.sketch_tree_structures
where schema_name = "test_sketch_k_tree" and table_name = "test";
----
2	0
1	2
1	0
0	3
0	0

query IIT nosort
verify sketch_tree of test_sketch_k_tree.test;
----
1	0	OK
1	2	OK
2	0	OK

statement ok
update test set name = "b" where id = 5;

# The update statement will remove the (0, 0) node and reuse it immediately.
query II nosort
select node_level, sketch_idx from information_schema.sketch_tree_structures
where schema_name = "test_sketch_k_tree" and table_name = "test";
----
2	0
1	2
1	0
0	3
0	0

query IIT nosort
verify sketch_tree of test_sketch_k_tree.test;
----
1	0	OK
1	2	OK
2	0	OK

# insert 11 rows to create 11 leaf nodes, which will form a sketch binary tree.
statement ok
insert into test values (1, "a"), (2, "a"), (3, "a"), (6, "a"), (7, "a"), (8, "a"), (9, "a"), (10, "a"),
(11, "a"), (12, "a"), (13, "a"), (14, "a"), (15, "a"), (16, "a");

# Now insert one more row, the sketch tree is transformed to be a sketch quad tree.
statement ok
insert into test values (17, "a");

query II nosort
select node_level, sketch_idx from information_schema.sketch_tree_structures
where schema_name = "test_sketch_k_tree" and table_name = "test";
----
6	0
4	16
4	0
2	16
2	12
2	8
2	4
2	0
0	16
0	15
0	14
0	13
0	12
0	11
0	10
0	9
0	8
0	7
0	6
0	5
0	4
0	3
0	2
0	1
0	0

query IIT nosort
verify sketch_tree of test_sketch_k_tree.test;
----
2	0	OK
2	4	OK
2	8	OK
2	12	OK
2	16	OK
4	0	OK
4	16	OK
6	0	OK

statement ok
delete from test where id = 17;

# After removing the last leaf node, the depth of sketch tree is decreased.
# But it is still a quad tree, because FoxLake does not support to transform
# a higher-level tree to a lower-level tree. Such as converting a quad tree
# to a binary tree.
query II nosort
select node_level, sketch_idx from information_schema.sketch_tree_structures
where schema_name = "test_sketch_k_tree" and table_name = "test";
----
4	0
2	12
2	8
2	4
2	0
0	15
0	14
0	13
0	12
0	11
0	10
0	9
0	8
0	7
0	6
0	5
0	4
0	3
0	2
0	1
0	0

query IIT nosort
verify sketch_tree of test_sketch_k_tree.test;
----
2	0	OK
2	4	OK
2	8	OK
2	12	OK
4	0	OK

statement ok
insert into test values (17, "a");

# Insert a new row one more time, the sketch tree grows again.
query II nosort
select node_level, sketch_idx from information_schema.sketch_tree_structures
where schema_name = "test_sketch_k_tree" and table_name = "test";
----
6	0
4	16
4	0
2	16
2	12
2	8
2	4
2	0
0	16
0	15
0	14
0	13
0	12
0	11
0	10
0	9
0	8
0	7
0	6
0	5
0	4
0	3
0	2
0	1
0	0

query IIT nosort
verify sketch_tree of test_sketch_k_tree.test;
----
2	0	OK
2	4	OK
2	8	OK
2	12	OK
2	16	OK
4	0	OK
4	16	OK
6	0	OK

# drop the table, all the sketches should be removed
statement ok
drop table test;

query II nosort
select node_level, sketch_idx from information_schema.sketch_tree_structures
where schema_name = "test_sketch_k_tree" and table_name = "test";
----

statement ok
drop database test_sketch_k_tree;