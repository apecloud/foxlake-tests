statement ok
DROP DATABASE IF EXISTS xyz_agg;

statement ok
CREATE DATABASE IF NOT EXISTS xyz_agg;

statement ok
USE xyz_agg;

statement ok
DROP TABLE IF EXISTS xyz_agg.t;

statement ok
CREATE TABLE IF NOT EXISTS t (id INT, msg VARCHAR(100), num INT);

statement ok
INSERT INTO t(id, msg, num) VALUES  (1, 'hello', 1), (2, 'world', 4), (3, null, 2), (4, 'FoxLake', 3), (5, '!', 5);

query ITI rowsort
SELECT * FROM t;
----
1	hello	1
2	world	4
3	NULL	2
4	FoxLake	3
5	!	5

# ====================== LAST ====================

# order by single not null value
query I rowsort
SELECT LAST(id ORDER BY num) FROM t;
----
5

query I rowsort
SELECT LAST(id ORDER BY num DESC) FROM t;
----
1

# order by single null value
query I rowsort
SELECT LAST(id ORDER BY msg) FROM t;
----
2

query I rowsort
SELECT LAST(id ORDER BY msg DESC) FROM t;
----
3


#order by multiple values
query I rowsort
SELECT LAST(id ORDER BY num, msg) FROM t;
----
5

query I rowsort
SELECT LAST(id ORDER BY msg, num) FROM t;
----
2

# ====================== GROUP_CONCAT ====================

# order by single not null value
query T rowsort
SELECT GROUP_CONCAT(id ORDER BY num) FROM t;
----
1,3,4,2,5

query T rowsort
SELECT GROUP_CONCAT(id ORDER BY num DESC) FROM t;
----
5,2,4,3,1

# order by single null value
query T rowsort
SELECT GROUP_CONCAT(id ORDER BY msg) FROM t;
----
3,5,4,1,2

query T rowsort
SELECT GROUP_CONCAT(id ORDER BY msg DESC) FROM t;
----
2,1,4,5,3


#order by multiple values
query T rowsort
SELECT GROUP_CONCAT(id ORDER BY num, msg) FROM t;
----
1,3,4,2,5

query T rowsort
SELECT GROUP_CONCAT(id ORDER BY msg, num) FROM t;
----
3,5,4,1,2

statement ok
DROP DATABASE IF EXISTS xyz_agg;
